xbar.one.largura.n1 <- qcc(databasebiscoito.n1$LARGURA..mm., type = "xbar.one")
mr.largura.n1 <- qcc(samov.largura.n1, type = "R")
#criando combinação de amplitude móvel
samov.temperatura <- cbind(databasebiscoito$Temperatura.Massa..ºC.[1:117], databasebiscoito$Temperatura.Massa..ºC.[2:118])
#criando objetos qcc para carta de controle x-MR
xbar.one.temperatura <- qcc(databasebiscoito$Temperatura.Massa..ºC., type = "xbar.one")
mr.temperatura <- qcc(samov.temperatura, type = "R")
#criando combinação de amplitude móvel
samov.peso_cru <- cbind(databasebiscoito$Peso.Cru..g.[1:117], databasebiscoito$Peso.Cru..g.[2:118])
#criando objetos qcc para carta de controle x-MR
xbar.one.peso_cru <- qcc(databasebiscoito$Peso.Cru..g., type = "xbar.one")
mr.peso_cru <- qcc(samov.peso_cru, type = "R")
#criando combinação de amplitude móvel
samov.peso_assado <- cbind(databasebiscoito$Peso.Assado..g. [1:117], databasebiscoito$Peso.Assado..g.[2:118])
#criando objetos qcc para carta de controle x-MR
xbar.one.peso_assado <- qcc(databasebiscoito$Peso.Assado..g., type = "xbar.one")
mr.peso_assado <- qcc(samov.peso_assado, type = "R")
#criando combinação de amplitude móvel
samov.espessura <- cbind(databasebiscoito$ESPESSURA..mm.[1:117], databasebiscoito$ESPESSURA..mm.[2:118])
#criando objetos qcc para carta de controle x-MR
xbar.one.espessura <- qcc(databasebiscoito$ESPESSURA..mm., type = "xbar.one")
mr.espessura <- qcc(samov.espessura, type = "R")
#criando combinação de amplitude móvel
samov.comprimento <- cbind(databasebiscoito$COMPRIMENTO..mm.[1:117], databasebiscoito$COMPRIMENTO..mm.[2:118])
#criando objetos qcc para carta de controle x-MR
xbar.one.comprimento <- qcc(databasebiscoito$COMPRIMENTO..mm., type = "xbar.one")
mr.comprimento <- qcc(samov.comprimento, type = "R")
#criando combinação de amplitude móvel
samov.largura <- cbind(databasebiscoito$LARGURA..mm. [1:117], databasebiscoito$LARGURA..mm.[2:118])
#criando objetos qcc para carta de controle x-MR
xbar.one.largura <- qcc(databasebiscoito$LARGURA..mm., type = "xbar.one")
mr.largura <- qcc(samov.largura, type = "R")
#carregando pacotes:
library(qcc)
library(SixSigma)
#criando objetos que recebe dados carregados de um arquivo:
databasebiscoito.n2 <- read.csv2("Database.Biscoito.Runs.n2.csv")
databasebiscoito.n3 <- read.csv2("Database.Biscoito.Runs.n3.csv")
#organizando os dados em grupos de amostras para ser usado na função qcc
amostras.n2.temperatura <- qcc.groups(databasebiscoito.n2$Temperatura.Massa..oC., databasebiscoito.n2$LADO)
#criando o objeto qcc, para carta de controle X-Bar
xbar.n2.temperatura <- qcc(amostras.n2.temperatura, type = "xbar")
#criando o objeto qcc, para carta de controle R
R.n2.temperatura <- qcc(amostras.n2.temperatura, type = "R")
#organizando os dados em grupos de amostras para ser usado na função qcc
amostras.n2.peso_cru <- qcc.groups(databasebiscoito.n2$Peso.Cru..g., databasebiscoito.n2$LADO)
#criando o objeto qcc, para carta de controle X-Bar
xbar.n2.peso_cru <- qcc(amostras.n2.peso_cru, type = "xbar")
#criando o objeto qcc, para carta de controle R
R.n2.peso_cru <- qcc(amostras.n2.peso_cru, type = "R")
#organizando os dados em grupos de amostras para ser usado na função qcc
amostras.n2.peso_assado <- qcc.groups(databasebiscoito.n2$Peso.Assado..g., databasebiscoito.n2$LADO)
#criando o objeto qcc, para carta de controle X-Bar
xbar.n2.peso_assado <- qcc(amostras.n2.peso_assado, type = "xbar")
#criando o objeto qcc, para carta de controle R
R.n2.peso_assado <- qcc(amostras.n2.peso_assado, type = "R")
#organizando os dados em grupos de amostras para ser usado na função qcc
amostras.n2.espessura <- qcc.groups(databasebiscoito.n2$ESPESSURA..mm., databasebiscoito.n2$LADO)
#criando o objeto qcc, para carta de controle X-Bar
xbar.n2.espessura <- qcc(amostras.n2.espessura, type = "xbar")
#criando o objeto qcc, para carta de controle R
S.n2.espessura <- qcc(amostras.n2.espessura, type = "R")
#organizando os dados em grupos de amostras para ser usado na função qcc
amostras.n2.comprimento <- qcc.groups(databasebiscoito.n2$COMPRIMENTO..mm., databasebiscoito.n2$LADO)
#criando o objeto qcc, para carta de controle X-Bar
xbar.n2.comprimento <- qcc(amostras.n2.comprimento, type = "xbar")
#criando o objeto qcc, para carta de controle R
S.n2.comprimento <- qcc(amostras.n2.comprimento, type = "R")
#organizando os dados em grupos de amostras para ser usado na função qcc
amostras.n2.largura <- qcc.groups(databasebiscoito.n2$LARGURA..mm., databasebiscoito.n2$LADO)
#criando o objeto qcc, para carta de controle X-Bar
xbar.n2.largura <- qcc(amostras.n2.largura, type = "xbar")
#criando o objeto qcc, para carta de controle R
S.n2.largura <- qcc(amostras.n2.largura, type = "R")
#organizando os dados em grupos de amostras para ser usado na função qcc
amostras.n3.temperatura <- qcc.groups(databasebiscoito.n3$Temperatura.Massa..oC., databasebiscoito.n3$LADO)
#criando o objeto qcc, para carta de controle X-Bar
xbar.n3.temperatura <- qcc(amostras.n3.temperatura, type = "xbar")
#criando o objeto qcc, para carta de controle R
S.n3.temperatura <- qcc(amostras.n3.temperatura, type = "R")
#organizando os dados em grupos de amostras para ser usado na função qcc
amostras.n3.peso_cru <- qcc.groups(databasebiscoito.n3$Peso.Cru..g., databasebiscoito.n3$LADO)
#criando o objeto qcc, para carta de controle X-Bar
xbar.n3.peso_cru <- qcc(amostras.n3.peso_cru, type = "xbar")
#criando o objeto qcc, para carta de controle R
R.n3.peso_cru <- qcc(amostras.n3.peso_cru, type = "R")
#organizando os dados em grupos de amostras para ser usado na função qcc
amostras.n3.peso_assado <- qcc.groups(databasebiscoito.n3$Peso.Assado..g., databasebiscoito.n3$LADO)
#criando o objeto qcc, para carta de controle X-Bar
xbar.n3.peso_assado <- qcc(amostras.n3.peso_assado, type = "xbar")
#criando o objeto qcc, para carta de controle R
R.n3.peso_assado <- qcc(amostras.n3.peso_assado, type = "R")
#organizando os dados em grupos de amostras para ser usado na função qcc
amostras.n3.espessura <- qcc.groups(databasebiscoito.n3$ESPESSURA..mm., databasebiscoito.n3$LADO)
#criando o objeto qcc, para carta de controle X-Bar
xbar.n3.espessura <- qcc(amostras.n3.espessura, type = "xbar")
#criando o objeto qcc, para carta de controle R
S.n3.espessura <- qcc(amostras.n3.espessura, type = "R")
#organizando os dados em grupos de amostras para ser usado na função qcc
amostras.n3.comprimento <- qcc.groups(databasebiscoito.n3$COMPRIMENTO..mm., databasebiscoito.n3$LADO)
#criando o objeto qcc, para carta de controle X-Bar
xbar.n3.comprimento <- qcc(amostras.n3.comprimento, type = "xbar")
#criando o objeto qcc, para carta de controle R
S.n3.comprimento <- qcc(amostras.n3.comprimento, type = "R")
#organizando os dados em grupos de amostras para ser usado na função qcc
amostras.n3.largura <- qcc.groups(databasebiscoito.n3$LARGURA..mm., databasebiscoito.n3$LADO)
#criando o objeto qcc, para carta de controle X-Bar
xbar.n3.largura <- qcc(amostras.n3.largura, type = "xbar")
#criando o objeto qcc, para carta de controle R
S.n3.largura <- qcc(amostras.n3.largura, type = "R")
#carregando pacotes:
library(qcc)
library(SixSigma
#criando objetos que recebe dados carregados de um arquivo:
databasebiscoito <- read.csv2("Database.Biscoito.csv")
limites.especificacao <-read.csv2("Limites.de.Especificacao.csv")
for (i in 1:118) {
if(databasebiscoito$Peso.Cru..g.[i] < limites.especificacao$Limite.Inferior.de.Especificação[1] |
databasebiscoito$Peso.Cru..g.[i] > limites.especificacao$Limite.Superior.de.Especificação[1])
{databasebiscoito$nao.conformidades[i] <- databasebiscoito$nao.conformidades[i]+1
}
if(databasebiscoito$Peso.Assado..g.[i] < limites.especificacao$Limite.Inferior.de.Especificação[2] |
databasebiscoito$Peso.Assado..g.[i] > limites.especificacao$Limite.Superior.de.Especificação[2])
{databasebiscoito$nao.conformidades[i] <- databasebiscoito$nao.conformidades[i]+1
}
if(databasebiscoito$ESPESSURA..mm.[i] < limites.especificacao$Limite.Inferior.de.Especificação[3] |
databasebiscoito$ESPESSURA..mm.[i] > limites.especificacao$Limite.Superior.de.Especificação[3])
{databasebiscoito$nao.conformidades[i] <- databasebiscoito$nao.conformidades[i]+1
}
if(databasebiscoito$COMPRIMENTO..mm.[i] < limites.especificacao$Limite.Inferior.de.Especificação[4] |
databasebiscoito$COMPRIMENTO..mm.[i] > limites.especificacao$Limite.Superior.de.Especificação[4])
{databasebiscoito$nao.conformidades[i] <- databasebiscoito$nao.conformidades[i]+1
}
if(databasebiscoito$LARGURA..mm.[i] < limites.especificacao$Limite.Inferior.de.Especificação[5] |
databasebiscoito$LARGURA..mm.[i] > limites.especificacao$Limite.Superior.de.Especificação[5])
{databasebiscoito$nao.conformidades[i] <- databasebiscoito$nao.conformidades[i]+1
}
#Removendo os zeros
if(databasebiscoito$nao.conformidades[i] == 0)
{databasebiscoito$nao.conformidades[i] <- NA
}
}
#criando objetos que recebe dados carregados de um arquivo:
databasebiscoito <- read.csv2("Database.Biscoito.csv")
#Comparando cada observação de cada variável com seu respectivo limite de
#controle, incrementando cada não conformidade e alocando em uma coluna
databasebiscoito$nao.conformidades = 0
for (i in 1:118) {
if(databasebiscoito$Peso.Cru..g.[i] < limites.especificacao$Limite.Inferior.de.Especificação[1] |
databasebiscoito$Peso.Cru..g.[i] > limites.especificacao$Limite.Superior.de.Especificação[1])
{databasebiscoito$nao.conformidades[i] <- databasebiscoito$nao.conformidades[i]+1
}
if(databasebiscoito$Peso.Assado..g.[i] < limites.especificacao$Limite.Inferior.de.Especificação[2] |
databasebiscoito$Peso.Assado..g.[i] > limites.especificacao$Limite.Superior.de.Especificação[2])
{databasebiscoito$nao.conformidades[i] <- databasebiscoito$nao.conformidades[i]+1
}
if(databasebiscoito$ESPESSURA..mm.[i] < limites.especificacao$Limite.Inferior.de.Especificação[3] |
databasebiscoito$ESPESSURA..mm.[i] > limites.especificacao$Limite.Superior.de.Especificação[3])
{databasebiscoito$nao.conformidades[i] <- databasebiscoito$nao.conformidades[i]+1
}
if(databasebiscoito$COMPRIMENTO..mm.[i] < limites.especificacao$Limite.Inferior.de.Especificação[4] |
databasebiscoito$COMPRIMENTO..mm.[i] > limites.especificacao$Limite.Superior.de.Especificação[4])
{databasebiscoito$nao.conformidades[i] <- databasebiscoito$nao.conformidades[i]+1
}
if(databasebiscoito$LARGURA..mm.[i] < limites.especificacao$Limite.Inferior.de.Especificação[5] |
databasebiscoito$LARGURA..mm.[i] > limites.especificacao$Limite.Superior.de.Especificação[5])
{databasebiscoito$nao.conformidades[i] <- databasebiscoito$nao.conformidades[i]+1
}
#Removendo os zeros
if(databasebiscoito$nao.conformidades[i] == 0)
{databasebiscoito$nao.conformidades[i] <- NA
}
}
View(databasebiscoito)
#criando o objeto qcc para a carta c
nao.conformidades.total <- databasebiscoito$nao.conformidades[
!is.na(databasebiscoito$nao.conformidades)]
#criando o objeto qcc para a carta c
nao.conformidades.total <- databasebiscoito$nao.conformidades[
!is.na(databasebiscoito$nao.conformidades)]
base.inteira.c <- qcc(data = nao.conformidades.total, type = "c")
databasebiscoito.n1 <- read.csv2("Database.Biscoito.Runs.n1.csv")
databasebiscoito.n2 <- read.csv2("Database.Biscoito.Runs.n2.csv")
databasebiscoito.n3 <- read.csv2("Database.Biscoito.Runs.n3.csv")
#Runs de n=1
databasebiscoito.n1$nao.conformidades = 0
for (i in 1:15) {
if(databasebiscoito.n1$Peso.Cru..g.[i] < limites.especificacao$Limite.Inferior.de.Especificação[1] | databasebiscoito.n1$Peso.Cru..g.[i] > limites.especificacao$Limite.Superior.de.Especificação[1])
{databasebiscoito.n1$nao.conformidades[i] <- databasebiscoito.n1$nao.conformidades[i]+1
}
if(databasebiscoito.n1$Peso.Assado..g.[i] < limites.especificacao$Limite.Inferior.de.Especificação[2] | databasebiscoito.n1$Peso.Assado..g.[i] > limites.especificacao$Limite.Superior.de.Especificação[2])
{databasebiscoito.n1$nao.conformidades[i] <- databasebiscoito.n1$nao.conformidades[i]+1
}
if(databasebiscoito.n1$ESPESSURA..mm.[i] < limites.especificacao$Limite.Inferior.de.Especificação[3] | databasebiscoito.n1$ESPESSURA..mm.[i] > limites.especificacao$Limite.Superior.de.Especificação[3])
{databasebiscoito.n1$nao.conformidades[i] <- databasebiscoito.n1$nao.conformidades[i]+1
}
if(databasebiscoito.n1$COMPRIMENTO..mm.[i] < limites.especificacao$Limite.Inferior.de.Especificação[4] | databasebiscoito.n1$COMPRIMENTO..mm.[i] > limites.especificacao$Limite.Superior.de.Especificação[4])
{databasebiscoito.n1$nao.conformidades[i] <- databasebiscoito.n1$nao.conformidades[i]+1
}
if(databasebiscoito.n1$LARGURA..mm.[i] < limites.especificacao$Limite.Inferior.de.Especificação[5] | databasebiscoito.n1$LARGURA..mm.[i] > limites.especificacao$Limite.Superior.de.Especificação[5])
{databasebiscoito.n1$nao.conformidades[i] <- databasebiscoito.n1$nao.conformidades[i]+1
}
#Removendo os zeros
if(databasebiscoito.n1$nao.conformidades[i] == 0)
{databasebiscoito.n1$nao.conformidades[i] <- NA
}
}
#criando o objeto qcc para a carta c
nao.conformidades.n1 <- databasebiscoito.n1$nao.conformidades[
!is.na(databasebiscoito.n1$nao.conformidades)]
#criando o objeto qcc para a carta c
nao.conformidades.n1 <- databasebiscoito.n1$nao.conformidades[
!is.na(databasebiscoito.n1$nao.conformidades)]
runs.n1.c <- qcc(data = nao.conformidades.n1, type = "c")
library(qcc)
library(SixSigma)
library(MSQC)
#criando objetos que recebe dados carregados de um arquivo:
databasebiscoito <- read.csv2("Database.Biscoito.csv")
databasebiscoito.n1 <- read.csv2("Database.Biscoito.Runs.n1.csv")
databasebiscoito.n2 <- read.csv2("Database.Biscoito.Runs.n2.csv")
databasebiscoito.n3 <- read.csv2("Database.Biscoito.Runs.n3.csv")
databasebiscoito_nums <- as.matrix(databasebiscoito[,3:8])
#Obter autovalores e autovetores
eigen(covariance(databasebiscoito_nums))
#resumo dos componentes principais
summary(prcomp(databasebiscoito_nums))
#complementando a análise de forma gráfica usando um gráfico de Pareto elementar:
#Primeiro, obtendo a variancia por meio do desvio padrão dos componentes:
varian <- (prcomp(databasebiscoito_nums)$sdev)^2
#armazenando a proporção da variancia e a proporção cumulativa:
perc <- varian/sum(varian)
cumperc <- cumsum(perc)
#traçando a proporção cumulativa como:
plot(cumperc, type = "o", xlim = c(0.5, length(cumperc) + 0.5),
ylim = c(0,1),xlab = "component", ylab = "percent")
#E adicionando o gráfico de barras
barplot(perc, add = TRUE, width = 1, beside = TRUE, col = "gray",
space = c(0.5,0,0,0,0,0))
#Os dois primeiros componentes são responsáveis por
#92,66% da variabilidade
#Portanto, a dimensão original do problema foi reduzida a um
#problema bidimensional usando
prcomp(databasebiscoito_nums)$x
#ou
predict(prcomp(databasebiscoito_nums))
#Assumindo que os parâmetros são desconhecidos será
#executada uma elipse de controle F e um gráfico de controle T2.
#Elipse de confiança F:
a <- predict(prcomp(databasebiscoito_nums))[,1:2]
S <- covariance(a)
Xmv <- colMeans(a)
plot(ellip(type="t2", a, alpha = 0.01),type="l", xlim = c(-10,10),
ylim = c(-6,6), xlab="z1", ylab="z2")
#centro:
points(Xmv [1], Xmv [2], pch = 3)
#adicionando pontos a elipse:
points(a, cex = 0.75)
#Carta T2
mult.chart(a, type = "t2", alpha = 0.01)
#criando objetos que recebe dados carregados de um arquivo:
databasebiscoito <- read.csv2("Database.Biscoito.csv")
databasebiscoito.n1 <- read.csv2("Database.Biscoito.Runs.n1.csv")
databasebiscoito.n2 <- read.csv2("Database.Biscoito.Runs.n2.csv")
databasebiscoito.n3 <- read.csv2("Database.Biscoito.Runs.n3.csv")
databasebiscoito_nums <- as.matrix(databasebiscoito[,3:8])
#Obter autovalores e autovetores
eigen(covariance(databasebiscoito_nums))
#resumo dos componentes principais
summary(prcomp(databasebiscoito_nums))
#complementando a análise de forma gráfica usando um gráfico de Pareto elementar:
#Primeiro, obtendo a variancia por meio do desvio padrão dos componentes:
varian <- (prcomp(databasebiscoito_nums)$sdev)^2
#armazenando a proporção da variancia e a proporção cumulativa:
perc <- varian/sum(varian)
cumperc <- cumsum(perc)
#traçando a proporção cumulativa como:
plot(cumperc, type = "o", xlim = c(0.5, length(cumperc) + 0.5),
ylim = c(0,1),xlab = "component", ylab = "percent")
#E adicionando o gráfico de barras
barplot(perc, add = TRUE, width = 1, beside = TRUE, col = "gray",
space = c(0.5,0,0,0,0,0))
#Os dois primeiros componentes são responsáveis por
#92,66% da variabilidade
#Portanto, a dimensão original do problema foi reduzida a um
#problema bidimensional usando
prcomp(databasebiscoito_nums)$x
#ou
predict(prcomp(databasebiscoito_nums))
#O R induz os dados das pontuações dos componentes principais
#Assumindo que os parâmetros são desconhecidos será
#executada uma elipse de controle F e um gráfico de controle T2.
#Elipse de confiança F:
a <- predict(prcomp(databasebiscoito_nums))[,1:2]
S <- covariance(a)
Xmv <- colMeans(a)
plot(ellip(type="t2", a, alpha = 0.01),type="l", xlim = c(-10,10),
ylim = c(-6,6), xlab="z1", ylab="z2")
#centro:
points(Xmv [1], Xmv [2], pch = 3)
#adicionando pontos a elipse:
points(a, cex = 0.75)
#Carta Hotelling T2 para os dois primeiros componentes principais
mult.chart(a, type = "t2", alpha = 0.01)
plot(ellip(type="t2", a, alpha = 0.01),type="l", xlim = c(-10,10),
ylim = c(-6,6), xlab="z1", ylab="z2")
#centro:
points(Xmv [1], Xmv [2], pch = 3)
library(qcc)
library(SixSigma)
library(MSQC)
#criando objetos que recebe dados carregados de um arquivo:
databasebiscoito <- read.csv2("Database.Biscoito.csv")
databasebiscoito.n1 <- read.csv2("Database.Biscoito.Runs.n1.csv")
databasebiscoito.n2 <- read.csv2("Database.Biscoito.Runs.n2.csv")
databasebiscoito.n3 <- read.csv2("Database.Biscoito.Runs.n3.csv")
databasebiscoito_nums <- as.matrix(databasebiscoito[,3:8])
#Obter autovalores e autovetores
eigen(covariance(databasebiscoito_nums))
#resumo dos componentes principais
summary(prcomp(databasebiscoito_nums))
#complementando a análise de forma gráfica usando um gráfico de Pareto elementar:
#Primeiro, obtendo a variancia por meio do desvio padrão dos componentes:
varian <- (prcomp(databasebiscoito_nums)$sdev)^2
#armazenando a proporção da variancia e a proporção cumulativa:
perc <- varian/sum(varian)
cumperc <- cumsum(perc)
#traçando a proporção cumulativa como:
plot(cumperc, type = "o", xlim = c(0.5, length(cumperc) + 0.5),
ylim = c(0,1),xlab = "component", ylab = "percent")
#E adicionando o gráfico de barras
barplot(perc, add = TRUE, width = 1, beside = TRUE, col = "gray",
space = c(0.5,0,0,0,0,0))
prcomp(databasebiscoito_nums)$x
#ou
predict(prcomp(databasebiscoito_nums))
#O R induz os dados das pontuações dos componentes principais
#Assumindo que os parâmetros são desconhecidos será
#executada uma elipse de controle F e um gráfico de controle T2.
#Elipse de confiança F:
a <- predict(prcomp(databasebiscoito_nums))[,1:2]
S <- covariance(a)
Xmv <- colMeans(a)
plot(ellip(type="t2", a, alpha = 0.01),type="l", xlim = c(-10,10),
ylim = c(-6,6), xlab="z1", ylab="z2")
#centro:
points(Xmv [1], Xmv [2], pch = 3)
#adicionando pontos a elipse:
points(a, cex = 0.75)
#Carta Hotelling T2 para os dois primeiros componentes principais
mult.chart(a, type = "t2", alpha = 0.01)
library(qcc)
library(SixSigma)
library(MSQC)
#criando objetos que recebe dados carregados de um arquivo:
databasebiscoito <- read.csv2("Database.Biscoito.csv")
databasebiscoito.n1 <- read.csv2("Database.Biscoito.Runs.n1.csv")
databasebiscoito.n2 <- read.csv2("Database.Biscoito.Runs.n2.csv")
databasebiscoito.n3 <- read.csv2("Database.Biscoito.Runs.n3.csv")
###############################################################################
#carta Hotelling T2 para o conjunto de toda a base de dados
databasebiscoito_nums <- as.matrix(databasebiscoito[,3:8])
mult.chart(type = "t2", databasebiscoito_nums)
###############################################################################
#carta Hotelling T2 para o conjunto de toda a base de dados
databasebiscoito_nums <- as.matrix(databasebiscoito[,3:8])
mult.chart(type = "t2", databasebiscoito_nums)
View(databasebiscoito)
#Criando 2 data frames (1 para cada n) que serão as 2 camadas da terceira
#dimensão do array
databasebiscoito_num_n2 <- databasebiscoito.n2[,3:8]
n1<-data.frame(array(dim=c(23,6)))
i<-1
j<-1
while (i<=23) {
n1[i,] <- databasebiscoito_num_n2[j,]
i<-i+1
j<-j+2
}
n1[i,] <- databasebiscoito_num_n2[j,]
while (i<=23) {
n1[i,] <- databasebiscoito_num_n2[j,]
i<-i+1
j<-j+2
}
#Executar a linha abaixo para apagar as variáveis usadas na construção
rm(n1,n2,n3,i,j)
n1<-data.frame(array(dim=c(23,6)))
i<-1
j<-1
while (i<=23) {
n1[i,] <- databasebiscoito_num_n2[j,]
i<-i+1
j<-j+2
}
n2<-data.frame(array(dim=c(23,6)))
i<-1
j<-2
while (i<=23) {
n2[i,] <- databasebiscoito_num_n2[j,]
i<-i+1
j<-j+2
}
#Juntando as 2 camadas e formando o array
arraybiscoito_n2 <- array(c(unlist(n1),unlist(n2)), c(23,6,2), )
arraybiscoito_n2
###############################################################################
#Carta Hotelling T2 para o conjunto N2 (n=2):
mult.chart(type = "t2", arraybiscoito_n2)
#Executar a linha abaixo para apagar as variáveis usadas na construção
rm(n1,n2,n3,i,j)
#Criando 3 data frames (1 para cada n) que serão as 3 camadas da terceira
#dimensão do array
databasebiscoito_num_n3 <- databasebiscoito.n3[,3:8]
n1<-data.frame(array(dim=c(19,6)))
i<-1
j<-1
while (i<=19) {
n1[i,] <- databasebiscoito_num_n3[j,]
i<-i+1
j<-j+3
}
n2<-data.frame(array(dim=c(19,6)))
i<-1
j<-2
while (i<=19) {
n2[i,] <- databasebiscoito_num_n3[j,]
i<-i+1
j<-j+3
}
n3<-data.frame(array(dim=c(19,6)))
i<-1
j<-3
while (i<=19) {
n3[i,] <- databasebiscoito_num_n3[j,]
i<-i+1
j<-j+3
}
#Juntando as 3 camadas e formando o array
arraybiscoito_n3 <- array(c(unlist(n1),unlist(n2),unlist(n3)), c(19,6,3), )
arraybiscoito_n3
###############################################################################
#Carta Hotelling T2 para o conjunto N2 (n=2):
mult.chart(type = "t2", arraybiscoito_n2)
###############################################################################
#Carta Hotelling T2 para o conjunto N3 (n=3):
mult.chart(type = "t2", arraybiscoito_n3)
###############################################################################
#carta CUSUM para o conjunto de toda a base de dados
mult.chart(type = "cusum", databasebiscoito_nums)
###############################################################################
#carta MCUSUM para o conjunto de toda a base de dados
mult.chart(type = "mcusum", databasebiscoito_nums)
###############################################################################
#carta MCUSUM para o conjunto N1 (n=1)
mult.chart(type = "mcusum", databasebiscoito_nums_n1)
###############################################################################
#carta Hotelling T2 para o conjunto N1 (n=1)
databasebiscoito_nums_n1 <- as.matrix(databasebiscoito.n1[,3:8])
mult.chart(type = "t2", databasebiscoito_nums_n1)
###############################################################################
#carta MCUSUM para o conjunto N1 (n=1)
mult.chart(type = "mcusum", databasebiscoito_nums_n1)
###############################################################################
#Carta MSUCUM para o conjunto N2 (n=2):
mult.chart(type = "mcusum", arraybiscoito_n2)
###############################################################################
#Carta MCUSUM para o conjunto N3 (n=3):
mult.chart(type = "mcusum", arraybiscoito_n3)
###############################################################################
#carta MEWMA para o conjunto de toda a base de dados
mult.chart(type = "mewma", databasebiscoito_nums)
###############################################################################
#carta MEWMA para o conjunto N1 (n=1)
mult.chart(type = "mewma", databasebiscoito_nums_n1)
###############################################################################
#Carta MEWMA para o conjunto N2 (n=2):
mult.chart(type = "mewma", arraybiscoito_n2)
###############################################################################
#Carta MEWMA para o conjunto N3 (n=3):
mult.chart(type = "mewma", arraybiscoito_n3)
library(qcc)
library(SixSigma)
#criando objetos que recebe dados carregados de um arquivo:
databasebiscoito.n2 <- read.csv2("Database.Biscoito.Runs.n2.csv")
databasebiscoito.n3 <- read.csv2("Database.Biscoito.Runs.n3.csv")
#organizando os dados em grupos de amostras para ser usado na função qcc
amostras.n2.temperatura <- qcc.groups(databasebiscoito.n2$Temperatura.Massa..oC., databasebiscoito.n2$LADO)
#criando o objeto qcc, para carta de controle X-Bar
xbar.n2.temperatura <- qcc(amostras.n2.temperatura, type = "xbar")
#criando o objeto qcc, para carta de controle R
R.n2.temperatura <- qcc(amostras.n2.temperatura, type = "R")
library(qcc)
library(SixSigma)
library(MSQC)
#criando objetos que recebe dados carregados de um arquivo:
databasebiscoito <- read.csv2("Database.Biscoito.csv")
databasebiscoito.n1 <- read.csv2("Database.Biscoito.Runs.n1.csv")
databasebiscoito.n2 <- read.csv2("Database.Biscoito.Runs.n2.csv")
databasebiscoito.n3 <- read.csv2("Database.Biscoito.Runs.n3.csv")
databasebiscoito_nums <- as.matrix(databasebiscoito[,3:8])
panel.cor <- function(x, y, digits = 2, prefix = "", cex.cor, ...)
{
usr <- par("usr"); on.exit(par(usr))
par(usr = c(0, 1, 0, 1))
r <- abs(cor(x, y))
txt <- format(c(r, 0.123456789), digits = digits)[1]
txt <- paste0(prefix, txt)
if(missing(cex.cor)) cex.cor <- 0.8/strwidth(txt)
text(0.5, 0.5, txt, cex = cex.cor)
}
pairs(databasebiscoito_nums, upper.panel = panel.cor)
